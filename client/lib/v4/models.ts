import * as TSU from "@panyam/tsutils";
import { LayoutParams, Cycle, Entity, Line } from "../models";
import { FlatAtom, Beat, BeatsBuilder } from "../models/iterators";

export class RawBlock extends Entity {
  content: string;
}

export class Role {
  name = "";
  notesOnly = false;
  index = 0;
}

export type CmdParam = { key: TSU.Nullable<string>; value: any };
export abstract class Command extends Entity {
  // Commands that are auto generated are usually created by other commands
  autoGenerated = false;
  prevSibling: null | Command = null;
  nextSibling: null | Command = null;
  params: CmdParam[];
  index: number;

  constructor(params: CmdParam[] = []) {
    super();
    this.params = params;
    this.index = 0;
    this.validateParams();
  }

  /**
   * called to validate parameters.
   */
  validateParams(): void {
    //
  }

  get name(): string {
    return this.constructor.name;
  }

  get type(): string {
    return "Command";
  }

  debugValue(): any {
    return { name: this.name, index: this.index, params: this.params };
  }

  getParam(name: string): any {
    for (const param of this.params) {
      if (param.key == name) return param.value;
    }
    return null;
  }

  getParamAt(index: number): any {
    return index < this.params.length ? this.params[index].value : null;
  }
  abstract applyToNotation(notebook: Notation): void;
}

export class Notation extends Entity {
  private _currRole: TSU.Nullable<Role> = null;
  private _unnamedLayoutParams: LayoutParams[] = [];
  private _namedLayoutParams = new Map<string, LayoutParams>();
  roles: Role[] = [];
  blocks: (Line | RawBlock)[] = [];
  currentAPB = 1;
  currentCycle: Cycle = Cycle.DEFAULT;
  currentBreaks: number[] = [];

  get unnamedLayoutParams(): ReadonlyArray<LayoutParams> {
    return this._unnamedLayoutParams;
  }

  get namedLayoutParams(): ReadonlyMap<string, LayoutParams> {
    return this._namedLayoutParams;
  }

  get type(): unknown {
    return "Notation";
  }

  addLine(line: Line): void {
    this.blocks.push(line);
  }

  addRawBlock(raw: RawBlock): void {
    this.blocks.push(raw);
    this.resetLine();
  }

  debugValue(): any {
    return {
      ...super.debugValue,
      // blocks: this.blocks.map((b) => b.debugValue()),
      roles: this.roles,
      blocks: this.blocks.map((b) => b.debugValue()),
      currentAPB: this.currentAPB,
      currentCycle: this.currentCycle?.uuid,
      currentBreaks: this.currentBreaks,
    };
  }

  getRole(name: string): TSU.Nullable<Role> {
    name = name.trim().toLowerCase();
    if (name == "") {
      return this.roles[this.roles.length - 1] || null;
    }
    for (let i = 0; i < this.roles.length; i++) {
      const rd = this.roles[i];
      if (name == rd.name) return rd;
    }
    return null;
  }

  newRole(name: string, notesOnly = false): Role {
    name = name.trim().toLowerCase();
    if (name.trim() == "") {
      throw new Error("Role name cannot be empty");
    }
    const roleDef = this.getRole(name);
    if (roleDef != null) {
      throw new Error("Role already exists");
      // roleDef.notesOnly = notesOnly;
      // return roleDef;
    }
    // create new and add
    const rd = new Role();
    rd.name = name;
    rd.notesOnly = notesOnly;
    rd.index = this.roles.length;
    this.roles.push(rd);

    return rd;
  }

  get currRole(): Role {
    if (this._currRole == null) {
      if (this.roles.length == 0) {
        throw new Error("No roles defined");
      } else {
        this._currRole = this.roles[this.roles.length - 1];
      }
    }
    return this._currRole;
  }

  setCurrRole(name: string): void {
    name = name.trim().toLowerCase();
    if (name.trim() == "") {
      throw new Error("Role name cannot be empty");
    }
    const roleDef = this.getRole(name);
    if (roleDef == null) {
      throw new Error("Role not found: " + name);
    }
    this._currRole = roleDef;
  }

  // Gets the current line, creating it if needed
  private _currentLine: Line | null = null;
  get currentLine(): Line {
    if (this._currentLine == null) {
      return this.newLine();
    }
    return this._currentLine;
  }

  resetLine(): void {
    this._currentLine = null;
  }

  newLine(): Line {
    this._currentLine = new Line();
    this.addLine(this._currentLine);
    return this._currentLine;
  }

  private _layoutParams: LayoutParams | null = null;
  resetLayoutParams(): void {
    this._layoutParams = null;
    this.resetLine();
  }

  get layoutParams(): LayoutParams {
    if (this._layoutParams == null) {
      // create it or find one that matches current params
      this._layoutParams = this.findUnnamedLayoutParams();
      if (this._layoutParams == null) {
        this._layoutParams = this.snapshotLayoutParams();
        this._unnamedLayoutParams.push(this._layoutParams);
      }
    }
    return this._layoutParams;
  }

  ensureNamedLayoutParams(name: string): LayoutParams {
    let lp = this._namedLayoutParams.get(name) || null;
    if (lp == null || this._layoutParams != lp) {
      // no change so go ahead
      if (lp == null) {
        // does not exist so create one by re-snapshotting it
        // and saving it
        lp = this.snapshotLayoutParams();
        this._namedLayoutParams.set(name, lp);
      } else {
        // copy named LPs attributes into our locals
        this.currentCycle = lp.cycle;
        this.currentAPB = lp.aksharasPerBeat;
        this.currentBreaks = lp.lineBreaks;
      }
      this._layoutParams = lp;
      this.resetLine(); // since layout params have changed
    }
    return this._layoutParams;
  }

  protected snapshotLayoutParams(): LayoutParams {
    return new LayoutParams({
      cycle: this.currentCycle,
      aksharasPerBeat: this.currentAPB,
      layout: this.currentBreaks,
    });
  }

  /**
   * Find a layout params that is currently _unnamed but matches one
   * by current set of layout attributes.
   */
  protected findUnnamedLayoutParams(): LayoutParams | null {
    return (
      this._unnamedLayoutParams.find((lp) => {
        return (
          lp.aksharasPerBeat == this.currentAPB &&
          this.currentCycle.equals(lp.cycle) &&
          lp.lineBreaksEqual(this.currentBreaks)
        );
      }) || null
    );
  }
}

/**
 * Given a line which contains its atoms in Roles, LineBeats is
 * a grouping of atoms by Beat (as per the specs defined in LayoutParams).
 */
export class LineBeats {
  roleBeats: Beat[][];
  constructor(public readonly line: Line) {
    this.roleBeats = [];
    for (const role of line.roles) {
      const bb = new BeatsBuilder(role, line.layoutParams!);
      bb.addAtoms(...role.atoms);
      this.roleBeats.push(bb.beats);
    }
  }
}
