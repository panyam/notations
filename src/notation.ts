import * as TSU from "@panyam/tsutils";
import { Entity } from "./entity";
import { Cycle } from "./cycle";
import { Line } from "./core";
import { LayoutParams } from "./layouts";

/**
 * Definition of a role in the notation.
 * A role represents a specific voice or part in the music notation.
 */
export class RoleDef {
  /** Name of the role */
  name = "";
  
  /** Whether this role contains only notes (true) or can also contain syllables/text (false) */
  notesOnly = false;
  
  /** Index of this role in the notation */
  index = 0;
}

/**
 * Type representing a command parameter with optional key and value.
 */
export type CmdParam = { key: TSU.Nullable<string>; value: any };

/**
 * Base class for commands in the notation.
 * Commands modify the notation in various ways, such as adding content,
 * changing layout, setting roles, etc.
 */
export abstract class Command extends Entity {
  /** Whether this command was auto-generated */
  autoGenerated = false;
  
  /** Previous command in the sequence */
  prevSibling: null | Command = null;
  
  /** Next command in the sequence */
  nextSibling: null | Command = null;
  
  /** Parameters for this command */
  params: CmdParam[];
  
  /** Index of this command in the sequence */
  index: number;

  /**
   * Creates a new Command.
   * @param params Optional parameters for the command
   */
  constructor(params: CmdParam[] = []) {
    super();
    this.params = params;
    this.index = 0;
    this.validateParams();
  }

  /**
   * Validates the parameters for this command.
   * @throws Error if parameters are invalid
   */
  validateParams(): void {
    //
  }

  /**
   * Gets the name of this command.
   */
  get name(): string {
    return this.constructor.name;
  }

  /**
   * Returns a debug-friendly representation of this command.
   * @returns An object containing debug information
   */
  debugValue(): any {
    return { name: this.name, index: this.index, params: this.params };
  }

  /**
   * Gets a parameter value by name.
   * @param name The name of the parameter
   * @returns The parameter value, or null if not found
   */
  getParam(name: string): any {
    for (const param of this.params) {
      if (param.key == name) return param.value;
    }
    return null;
  }

  /**
   * Gets a parameter value by index.
   * @param index The index of the parameter
   * @returns The parameter value, or null if not found
   */
  getParamAt(index: number): any {
    return index < this.params.length ? this.params[index].value : null;
  }
  
  /**
   * Applies this command to a notation.
   * @param notation The notation to apply this command to
   */
  abstract applyToNotation(notebook: Notation): void;
}

/**
 * Represents a raw block of content in the notation.
 * Raw blocks can contain arbitrary content like markdown, HTML, etc.
 */
export class RawBlock extends Entity {
  readonly TYPE: string = "RawBlock";
  
  /**
   * Creates a new RawBlock.
   * @param content The content of the block
   * @param contentType The type of content (e.g., "md" for markdown)
   */
  constructor(public content: string, public contentType: string = "md") {
    super();
  }

  /**
   * Returns a debug-friendly representation of this raw block.
   * @returns An object containing debug information
   */
  debugValue(): any {
    return { ...super.debugValue(), content: this.content, contentType: this.contentType };
  }
}

/**
 * Represents metadata for the notation.
 */
export class MetaData {
  /**
   * Creates a new MetaData.
   * @param key The key for this metadata
   * @param value The value of this metadata
   * @param params Optional additional parameters
   */
  constructor(public readonly key: string, public readonly value: string, public readonly params?: any) {
    params = params || {};
  }
}

/**
 * The main class representing a complete notation.
 * Notation contains all the elements, settings, and layout information for a piece of music.
 */
export class Notation extends Entity {
  readonly TYPE = "Notation";
  private _unnamedLayoutParams: LayoutParams[] = [];
  private _namedLayoutParams = new Map<string, LayoutParams>();
  private _currRoleDef: TSU.Nullable<RoleDef> = null;
  
  /** Roles defined in this notation */
  roles: RoleDef[] = [];
  
  /** Blocks (lines or raw blocks) in this notation */
  blocks: (Line | RawBlock)[] = [];
  
  /** Current beat duration multiplier */
  currentAPB = 1;
  
  /** Current cycle pattern */
  currentCycle: Cycle = Cycle.DEFAULT;
  
  /** Current line breaks pattern */
  currentBreaks: number[] = [];
  
  /** Metadata associated with this notation */
  metadata = new Map<string, MetaData>();
  
  /** Handler for missing roles */
  onMissingRole: (name: string) => RoleDef | null = (name) => this.newRoleDef(name, name == "sw");

  /**
   * Gets the unnamed layout parameters.
   */
  get unnamedLayoutParams(): ReadonlyArray<LayoutParams> {
    return this._unnamedLayoutParams;
  }

  /**
   * Gets the named layout parameters.
   */
  get namedLayoutParams(): ReadonlyMap<string, LayoutParams> {
    return this._namedLayoutParams;
  }

  /**
   * Adds a line to this notation.
   * @param line The line to add
   */
  addLine(line: Line): void {
    this.blocks.push(line);
  }

  /**
   * Removes a line from this notation.
   * @param line The line to remove
   * @returns The index of the removed line, or -1 if not found
   */
  removeLine(line: Line): number {
    const index = this.blocks.findIndex((l) => l == line);
    if (index >= 0) {
      this.blocks.splice(index, 1);
    }
    return index;
  }

  /**
   * Adds a raw block to this notation.
   * @param raw The raw block to add
   */
  addRawBlock(raw: RawBlock): void {
    this.blocks.push(raw);
    this.resetLine();
  }

  /**
   * Adds metadata to this notation.
   * @param meta The metadata to add
   * @param addBlock Whether to add a corresponding raw block, defaults to true
   */
  addMetaData(meta: MetaData, addBlock = true): void {
    if (addBlock && !this.metadata.has(meta.key)) {
      // Add a new raw block here
      // set this by key so even if metadata changes we can
      // get latest value of it
      const raw = new RawBlock(meta.key, "metadata");
      this.addRawBlock(raw);
    }
    this.metadata.set(meta.key, meta);
  }

  /**
   * Returns a debug-friendly representation of this notation.
   * @returns An object containing debug information
   */
  debugValue(): any {
    return {
      ...super.debugValue,
      roles: this.roles,
      blocks: this.blocks.map((b) => b.debugValue()),
      currentAPB: this.currentAPB,
      currentCycle: this.currentCycle?.uuid,
      currentBreaks: this.currentBreaks,
    };
  }

  /**
   * Gets a role definition by name.
   * @param name The name of the role
   * @returns The role definition, or null if not found
   */
  getRoleDef(name: string): TSU.Nullable<RoleDef> {
    name = name.trim().toLowerCase();
    if (name == "") {
      return this.roles[this.roles.length - 1] || null;
    }
    for (let i = 0; i < this.roles.length; i++) {
      const rd = this.roles[i];
      if (name == rd.name) return rd;
    }
    return null;
  }

  /**
   * Creates a new role definition.
   * @param name The name of the role
   * @param notesOnly Whether the role contains only notes, defaults to false
   * @returns The created role definition
   * @throws Error if the name is empty or the role already exists
   */
  newRoleDef(name: string, notesOnly = false): RoleDef {
    name = name.trim().toLowerCase();
    if (name.trim() == "") {
      throw new Error("Role name cannot be empty");
    }
    const roleDef = this.getRoleDef(name);
    if (roleDef != null) {
      throw new Error("Role already exists");
      // roleDef.notesOnly = notesOnly;
      // return roleDef;
    }
    // create new and add
    const rd = new RoleDef();
    rd.name = name;
    rd.notesOnly = notesOnly;
    rd.index = this.roles.length;
    this.roles.push(rd);

    return rd;
  }

  /**
   * Gets the current role definition.
   */
  get currRoleDef(): RoleDef | null {
    if (this._currRoleDef == null) {
      if (this.roles.length == 0) {
        return null;
      } else {
        this._currRoleDef = this.roles[this.roles.length - 1];
      }
    }
    return this._currRoleDef;
  }

  /**
   * Sets the current role by name.
   * @param name The name of the role to set as current
   * @throws Error if the name is empty or the role is not found
   */
  setCurrRole(name: string): void {
    name = name.trim().toLowerCase();
    if (name.trim() == "") {
      throw new Error("Role name cannot be empty");
    }
    const roleDef = this.getRoleDef(name) || (this.onMissingRole ? this.onMissingRole(name) || null : null);
    if (roleDef == null) {
      throw new Error("Role not found: " + name);
    }
    this._currRoleDef = roleDef;
  }

  // Gets the current line, creating it if needed
  private _currentLine: Line | null = null;
  
  /**
   * Gets the current line, creating it if needed.
   */
  get currentLine(): Line {
    if (this._currentLine == null) {
      return this.newLine();
    }
    return this._currentLine;
  }

  /**
   * Resets the current line pointer to null.
   */
  resetLine(): void {
    this._currentLine = null;
  }

  /**
   * Creates a new line and makes it the current line.
   * @returns The newly created line
   */
  newLine(): Line {
    if (this._currentLine && this._currentLine.isEmpty) {
      // then remove it first instead of adding another
      // so we dont have a string of empty lines
      this.removeLine(this._currentLine);
    }
    this._currentLine = new Line();
    this.addLine(this._currentLine);
    return this._currentLine;
  }

  private _layoutParams: LayoutParams | null = null;
  
  /**
   * Resets the current layout parameters to null.
   */
  resetLayoutParams(): void {
    this._layoutParams = null;
    this.resetLine();
  }

  /**
   * Gets the current layout parameters, creating or finding an appropriate one if needed.
   */
  get layoutParams(): LayoutParams {
    if (this._layoutParams == null) {
      // create it or find one that matches current params
      this._layoutParams = this.findUnnamedLayoutParams();
      if (this._layoutParams == null) {
        this._layoutParams = this.snapshotLayoutParams();
        this._unnamedLayoutParams.push(this._layoutParams);
      }
    }
    return this._layoutParams;
  }

  /**
   * Ensures that named layout parameters with the given name exist.
   * Creates them if they don't exist, or updates current layout parameters to match.
   * 
   * @param name The name of the layout parameters
   * @returns The layout parameters
   */
  ensureNamedLayoutParams(name: string): LayoutParams {
    let lp = this._namedLayoutParams.get(name) || null;
    if (lp == null || this._layoutParams != lp) {
      // no change so go ahead
      if (lp == null) {
        // does not exist so create one by re-snapshotting it
        // and saving it
        lp = this.snapshotLayoutParams();
        this._namedLayoutParams.set(name, lp);
      } else {
        // copy named LPs attributes into our locals
        this.currentCycle = lp.cycle;
        this.currentAPB = lp.beatDuration;
        this.currentBreaks = lp.lineBreaks;
      }
      this._layoutParams = lp;
      this.resetLine(); // since layout params have changed
    }
    return this._layoutParams;
  }

  /**
   * Creates a snapshot of the current layout parameters.
   * @returns A new LayoutParams object with the current settings
   */
  protected snapshotLayoutParams(): LayoutParams {
    return new LayoutParams({
      cycle: this.currentCycle,
      beatDuration: this.currentAPB,
      layout: this.currentBreaks,
    });
  }

  /**
   * Finds an unnamed layout parameters object that matches the current settings.
   * @returns Matching layout parameters, or null if none found
   */
  protected findUnnamedLayoutParams(): LayoutParams | null {
    return (
      this._unnamedLayoutParams.find((lp) => {
        return (
          lp.beatDuration == this.currentAPB &&
          this.currentCycle.equals(lp.cycle) &&
          lp.lineBreaksEqual(this.currentBreaks)
        );
      }) || null
    );
  }
}
